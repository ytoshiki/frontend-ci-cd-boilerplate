# CircleCI configuration file

version: 2.1
orbs:
  slack: circleci/slack@4.9.3
executors:
  app-executor:
    docker:
      # Primary container image where all steps run
      - image: cimg/node:18.17.0
    # Could be called whatever, it's just where CircleCI image will be added
    working_directory: ~/repo
aliases:
  - &show-current-branch
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        # Search for the cache that matches the checksum of this package.json
        # This key will fail if this file has been modified
        - app-{{ checksum "package.json" }}
        # Search for the most recently generated cache used from any branch.
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &build-project
    run:
      name: Build project
      command: |
        npm install 
        npm run build
        cd dist 
        zip ../dist.zip -r * .[^.]*
        echo "Build succeeded"
  - &save-cache
    save_cache:
      key: app-{{ checksum "package.json" }}
      paths:
        - node_modules
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update 
        sudo apt-get install -y awscli 
        sudo apt-get install -y python-pip python3-dev build-essential

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - *build-project
  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Run ESLint
          command: npm run lint
  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Run Prettier
          command: npm run prettier:check
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_PRODUCTION_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_STAGING_BUCKET} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/dist s3://${AWS_DEV_BUCKET} --delete
            fi
  invalidate-cloudfront-cache:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *install-aws-cli
      - run:
          name: Invalidate CloudFront Cache
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
            fi
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
workflows:
  build_and_deploy:
    jobs:
      - linting
      - prettier
      - build:
          requires:
            - linting
            - prettier
      - deploy-to-aws-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - production
      - invalidate-cloudfront-cache:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - production
  send-notification:
    jobs:
      - notify:
          filters:
            branches:
              only:
                - feature/slack
          context: slack-secrets
